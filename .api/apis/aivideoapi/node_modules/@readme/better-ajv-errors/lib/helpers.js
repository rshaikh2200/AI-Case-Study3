"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createErrorInstances = createErrorInstances;
exports["default"] = prettify;
exports.filterRedundantErrors = filterRedundantErrors;
exports.makeTree = makeTree;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _utils = require("./utils");
var _validationErrors = require("./validation-errors");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable no-param-reassign */
var JSON_POINTERS_REGEX = /\/[\w_-]+(\/\d+)?/g;

// Make a tree of errors from ajv errors array
function makeTree() {
  var ajvErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var root = {
    children: {}
  };
  ajvErrors.forEach(function (ajvError) {
    var instancePath = typeof ajvError.instancePath !== 'undefined' ? ajvError.instancePath : ajvError.dataPath;

    // `dataPath === ''` is root
    var paths = instancePath === '' ? [''] : instancePath.match(JSON_POINTERS_REGEX);
    if (paths) {
      paths.reduce(function (obj, path, i) {
        obj.children[path] = obj.children[path] || {
          children: {},
          errors: []
        };
        if (i === paths.length - 1) {
          obj.children[path].errors.push(ajvError);
        }
        return obj.children[path];
      }, root);
    }
  });
  return root;
}
function filterRedundantErrors(root, parent, key) {
  /**
   * If there is a `required` error then we can just skip everythig else.
   * And, also `required` should have more priority than `anyOf`. @see #8
   */
  (0, _utils.getErrors)(root).forEach(function (error) {
    if ((0, _utils.isRequiredError)(error)) {
      root.errors = [error];
      root.children = {};
    }
  });

  /**
   * If there is an `anyOf` error that means we have more meaningful errors
   * inside children. So we will just remove all errors from this level.
   *
   * If there are no children, then we don't delete the errors since we should
   * have at least one error to report.
   */
  if ((0, _utils.getErrors)(root).some(_utils.isAnyOfError)) {
    if (Object.keys(root.children).length > 0) {
      delete root.errors;
    }
  }

  /**
   * If all errors are `enum` and siblings have any error then we can safely
   * ignore the node.
   *
   * **CAUTION**
   * Need explicit `root.errors` check because `[].every(fn) === true`
   * https://en.wikipedia.org/wiki/Vacuous_truth#Vacuous_truths_in_mathematics
   */
  if (root.errors && root.errors.length && (0, _utils.getErrors)(root).every(_utils.isEnumError)) {
    if ((0, _utils.getSiblings)(parent)(root)
    // Remove any reference which becomes `undefined` later
    .filter(_utils.notUndefined).some(_utils.getErrors)) {
      delete parent.children[key];
    }
  }
  Object.entries(root.children).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      k = _ref2[0],
      child = _ref2[1];
    return filterRedundantErrors(child, root, k);
  });
}
function createErrorInstances(root, options) {
  var errors = (0, _utils.getErrors)(root);
  if (errors.length && errors.every(_utils.isEnumError)) {
    var uniqueValues = new Set((0, _utils.concatAll)([])(errors.map(function (e) {
      return e.params.allowedValues;
    })));
    var allowedValues = (0, _toConsumableArray2["default"])(uniqueValues);
    var error = errors[0];
    return [new _validationErrors.EnumValidationError(_objectSpread(_objectSpread({}, error), {}, {
      params: {
        allowedValues: allowedValues
      }
    }), options)];
  }
  return (0, _utils.concatAll)(errors.reduce(function (ret, error) {
    switch (error.keyword) {
      case 'additionalProperties':
        return ret.concat(new _validationErrors.AdditionalPropValidationError(error, options));
      case 'pattern':
        return ret.concat(new _validationErrors.PatternValidationError(error, options));
      case 'required':
        return ret.concat(new _validationErrors.RequiredValidationError(error, options));
      case 'unevaluatedProperties':
        return ret.concat(new _validationErrors.UnevaluatedPropValidationError(error, options));
      default:
        return ret.concat(new _validationErrors.DefaultValidationError(error, options));
    }
  }, []))((0, _utils.getChildren)(root).map(function (child) {
    return createErrorInstances(child, options);
  }));
}
function prettify(ajvErrors, options) {
  var tree = makeTree(ajvErrors || []);
  filterRedundantErrors(tree);
  return createErrorInstances(tree, options);
}