"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _momoa = require("@humanwhocodes/momoa");
var _vitest = require("vitest");
var _ = require("..");
var _testHelpers = require("../../test-helpers");
function loadScenario(_x) {
  return _loadScenario.apply(this, arguments);
}
function _loadScenario() {
  _loadScenario = (0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee8(n) {
    var fixturePath;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          fixturePath = (0, _testHelpers.getFixturePath)(__dirname, "scenario-".concat(n, ".json"));
          _context8.t0 = _momoa.parse;
          _context8.next = 4;
          return _promises["default"].readFile(fixturePath, 'utf8');
        case 4:
          _context8.t1 = _context8.sent;
          return _context8.abrupt("return", (0, _context8.t0)(_context8.t1));
        case 6:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _loadScenario.apply(this, arguments);
}
(0, _vitest.describe)('JSON', function () {
  (0, _vitest.it)('can work on simple JSON', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return loadScenario(1);
        case 2:
          jsonAst = _context.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/foo')).toMatchSnapshot();
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/foo', true)).toMatchSnapshot();
        case 5:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  (0, _vitest.it)('can work on JSON with a key named value', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return loadScenario(2);
        case 2:
          jsonAst = _context2.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/value')).toMatchSnapshot();
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/value', true)).toMatchSnapshot();
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  (0, _vitest.it)('can work on JSON with a key named meta', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return loadScenario(3);
        case 2:
          jsonAst = _context3.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/meta/isMeta')).toMatchSnapshot();
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/meta/isMeta', true)).toMatchSnapshot();
        case 5:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  })));
  (0, _vitest.it)('can work on JSON with Array', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return loadScenario(4);
        case 2:
          jsonAst = _context4.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/arr/1/foo')).toMatchSnapshot();
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/arr/1/foo', true)).toMatchSnapshot();
        case 5:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  (0, _vitest.it)('can work on JSON with Array with empty children', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee5() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return loadScenario(4);
        case 2:
          jsonAst = _context5.sent;
          (0, _vitest.expect)((0, _.getDecoratedDataPath)(jsonAst, '/arr/4')).toMatchSnapshot();
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  })));
  (0, _vitest.it)('should not throw error when children is array', function () {
    var rawJsonWithArrayItem = JSON.stringify({
      foo: 'bar',
      arr: [1, {
        foo: 'bar'
      }, 3, ['anArray']]
    });
    var jsonAst = (0, _momoa.parse)(rawJsonWithArrayItem);
    (0, _vitest.expect)((0, _.getDecoratedDataPath)(jsonAst, '/arr/3')).toMatchSnapshot();
  });
  (0, _vitest.it)('can work with unescaped JSON pointers with ~1', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee6() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return loadScenario(5);
        case 2:
          jsonAst = _context6.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/foo/~1some~1path/value')).toMatchSnapshot();
        case 4:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  })));
  (0, _vitest.it)('can work with unescaped JSON pointers with ~0', /*#__PURE__*/(0, _asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee7() {
    var jsonAst;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return loadScenario(5);
        case 2:
          jsonAst = _context7.sent;
          (0, _vitest.expect)((0, _.getMetaFromPath)(jsonAst, '/foo/~0some~0path/value')).toMatchSnapshot();
        case 4:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  })));
});